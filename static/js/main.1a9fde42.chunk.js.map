{"version":3,"sources":["components/OneContact/OneContact.module.css","components/Filter/Filter.module.css","components/Container/Container.module.css","components/ContactList/ContactList.module.css","components/Container/Container.js","redux/contacts/actions.js","redux/contacts/operations.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.js","components/OneContact/OneContact.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contacts/reducers.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","Container","children","className","styles","container","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","dispatch","actions","get","then","data","catch","error","id","delete","name","number","contact","post","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","ContactForm","useState","setName","setNumber","useSelector","useDispatch","handleChange","e","target","value","form","onSubmit","preventDefault","find","toLocaleLowerCase","alert","operations","label","input","type","pattern","title","onChange","required","btn","Contact","onDelete","item","text","onClick","ContactList","useEffect","list","map","onDeleteContact","Filter","filterLabel","filterInput","App","createReducer","_","payload","loading","combineReducers","store","configureStore","reducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a9fde42.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"OneContact_item__2QW1g\",\"text\":\"OneContact_text__1-1Bn\",\"btn\":\"OneContact_btn__3stqy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterInput\":\"Filter_filterInput__1lNi2\",\"filterLabel\":\"Filter_filterLabel__3y6Nx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2SFJx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3Etoj\"};","import PropTypes from 'prop-types';\r\nimport styles from './Container.module.css';\r\n\r\nfunction Container({ children }) {\r\n  return <div className={styles.container}>{children}</div>;\r\n}\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Container;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\nconst fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\nconst fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nconst addContactRequest = createAction('contacts/addContactRequest');\r\nconst addContactSuccess = createAction('contacts/addContactSuccess');\r\nconst addContactError = createAction('contacts/addContactError');\r\n\r\nconst deleteContactRequest = createAction('deleteContactRequest');\r\nconst deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nconst deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\nexport default {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  changeFilter,\r\n};\r\n","import axios from 'axios';\r\nimport actions from './actions';\r\n\r\naxios.defaults.baseURL = 'https://619fdee3a6470200176131ff.mockapi.io';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(actions.fetchContactsRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(actions.fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(actions.fetchContactsError(error)));\r\n};\r\n\r\nconst addContact = (name, number) => dispatch => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n\r\n  dispatch(actions.addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(actions.addContactSuccess(data)))\r\n    .catch(error => dispatch(actions.addContactError(error)));\r\n};\r\n\r\nconst deleteContact = id => dispatch => {\r\n  dispatch(actions.deleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(actions.deleteContactSuccess(id)))\r\n    .catch(error => dispatch(actions.deleteContactError(error)));\r\n};\r\n\r\nexport default {\r\n  fetchContacts,\r\n  deleteContact,\r\n  addContact,\r\n};\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter)\r\n    );\r\n  }\r\n);\r\n","import { useState } from 'react';\r\nimport styles from './ContactForm.module.css';\r\nimport operations from '../../redux/contacts/operations';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getContacts } from '../../redux/contacts/selectors';\r\n\r\nexport default function ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (\r\n      contacts.find(\r\n        contact => contact.name.toLowerCase() === name.toLocaleLowerCase()\r\n      )\r\n    ) {\r\n      return alert(`${name} is already exist`);\r\n    }\r\n    dispatch(operations.addContact(name, number));\r\n    resetForm();\r\n  };\r\n\r\n  return (\r\n    <form className={styles.form} onSubmit={handleSubmit}>\r\n      <label className={styles.label}>\r\n        Name\r\n        <input\r\n          className={styles.input}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n      </label>\r\n      <label className={styles.label}>\r\n        Number\r\n        <input\r\n          className={styles.input}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n      </label>\r\n      <button className={styles.btn} type=\"submit\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n","import styles from './OneContact.module.css';\r\n\r\nconst Contact = ({ name, number, onDelete }) => (\r\n  <div className={styles.item}>\r\n    <p className={styles.text}>\r\n      {name}:{number}\r\n    </p>\r\n    <button className={styles.btn} type=\"button\" onClick={onDelete}>\r\n      Delete\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default Contact;\r\n","import styles from './ContactList.module.css';\r\nimport Contact from '../OneContact/OneContact';\r\nimport PropTypes from 'prop-types';\r\nimport { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport operations from '../../redux/contacts/operations';\r\nimport { getVisibleContacts } from '../../redux/contacts/selectors';\r\n\r\nexport default function ContactList() {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(operations.fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  const contacts = useSelector(getVisibleContacts);\r\n\r\n  const onDeleteContact = id => dispatch(operations.deleteContact(id));\r\n  return (\r\n    <ul className={styles.list}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id}>\r\n          <Contact\r\n            name={name}\r\n            number={number}\r\n            onDelete={() => onDeleteContact(id)}\r\n          />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n};\r\n","import actions from '../../redux/contacts/actions';\r\nimport styles from './Filter.module.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getFilter } from '../../redux/contacts/selectors';\r\n\r\nconst Filter = () => {\r\n  const contacts = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <label className={styles.filterLabel}>\r\n      Find contacts by name\r\n      <input\r\n        className={styles.filterInput}\r\n        type=\"text\"\r\n        value={contacts}\r\n        onChange={e => dispatch(actions.changeFilter(e.target.value))}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","// import { Component } from 'react';\r\nimport './App.css';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n// import { connect } from 'react-redux';\r\n\r\nimport Container from './components/Container/Container';\r\nimport ContactForm from './components/ContactForm/ContactForm';\r\nimport ContactList from './components/ContactList/ContactList';\r\nimport Filter from './components/Filter/Filter';\r\n\r\nexport default function App() {\r\n  // state = {\r\n  //   // contacts: [\r\n  //   //   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n  //   //   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n  //   //   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n  //   //   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n  //   // ],\r\n  //   filter: '',\r\n  // };\r\n\r\n  // componentDidMount() {\r\n  //   const localContacts = localStorage.getItem('contacts');\r\n  //   const parsedContacts = JSON.parse(localContacts);\r\n  //   if (parsedContacts) {\r\n  //     this.setState({ contacts: parsedContacts });\r\n  //   }\r\n  // }\r\n\r\n  // componentDidUpdate(prevProps, prevState) {\r\n  //   if (prevState.contacts !== this.state.contacts) {\r\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\r\n  //   }\r\n  // }\r\n\r\n  // addNewContact = ({ name, number }) => {\r\n  //   const contact = {\r\n  //     id: uuidv4(),\r\n  //     name,\r\n  //     number,\r\n  //   };\r\n\r\n  //   this.state.contacts.find(({ name }) => name === contact.name)\r\n  //     ? alert(`${contact.name} already exists`)\r\n  //     : this.setState(prevState => {\r\n  //         return {\r\n  //           contacts: [...prevState.contacts, contact],\r\n  //         };\r\n  //       });\r\n  // };\r\n\r\n  // changeFilter = e => {\r\n  //   this.setState({ filter: e.currentTarget.value });\r\n  // };\r\n\r\n  // deleteContact = id => {\r\n  //   this.setState(prevState => {\r\n  //     return {\r\n  //       contacts: prevState.contacts.filter(contact => contact.id !== id),\r\n  //     };\r\n  //   });\r\n  // };\r\n\r\n  // render() {\r\n  //   const { filter } = this.state;\r\n  //   const visibleContacts = this.state.contacts.filter(contact =>\r\n  //     contact.name.toLowerCase().includes(this.state.filter.toLowerCase())\r\n  //   );\r\n  return (\r\n    <Container>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </Container>\r\n  );\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport actions from './actions';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\nconst {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  changeFilter,\r\n} = actions;\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nexport const filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n});\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport contactsReducer from './contacts/reducers';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n\r\n// const persistConfig = {\r\n//   key: 'contacts',\r\n//   storage,\r\n//   blacklist: ['filter'],\r\n// };\r\n\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }),\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <PersistGate loading={null} persistor={persistor}> */}\n    <Provider store={store}>\n      <App />\n    </Provider>\n    {/* </PersistGate> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ContactForm_input__2NksE\",\"label\":\"ContactForm_label__2H6vr\",\"btn\":\"ContactForm_btn__2mqZE\"};"],"sourceRoot":""}